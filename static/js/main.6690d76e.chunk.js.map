{"version":3,"sources":["components/styled-components/Button.js","components/styled-components/ContentBox.js","components/styled-components/Input.js","components/styled-components/Label.js","components/styled-components/FormField.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","styles/theme.js","styles/globalStyles.js","index.js"],"names":["Button","styled","button","props","size","bg","theme","primaryTextColor","primaryBgColor","invertedTextColor","invertedBgColor","position","accentColor","ContentBox","div","Input","input","Label","label","FormField","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateFilter","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","id","delete","get","Form","withComponent","ContactForm","state","handleChange","event","target","value","setState","handleSubmit","createNewContact","preventDefault","reset","this","onSubmit","type","pattern","title","required","onChange","React","Component","connect","contactsOperations","getFilter","contacts","filter","getIsLoading","loading","getFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","includes","contactsSelectors","e","actions","filteredContacts","deleteContact","map","onClick","App","fetchContacts","isLoadingContacts","createReducer","_","payload","find","alert","console","log","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6690d76e.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n\r\n  ${props => {\r\n    switch (props.size) {\r\n      case 'small':\r\n        return 'height: 14px; min-width: 40px; font-size: 12px;';\r\n      case 'large':\r\n        return 'height: 30px; min-width: 140px; font-size: 20px;';\r\n      default:\r\n        return 'height: 24px; min-width: 100px; font-size: 16px;';\r\n    }\r\n  }}\r\n\r\n  ${props => {\r\n    if (props.bg === 'light') {\r\n      return `color: ${props.theme.primaryTextColor}; background-color: ${props.theme.primaryBgColor};`;\r\n    }\r\n    if (props.bg === 'dark') {\r\n      return `color: ${props.theme.invertedTextColor}; background-color: ${props.theme.invertedBgColor};`;\r\n    }\r\n  }}\r\n\r\n  ${props => {\r\n    switch (props.position) {\r\n      case 'bottom':\r\n        return 'margin-top: 5px;';\r\n      case 'right':\r\n        return 'margin-left: 10px;';\r\n      case 'left':\r\n        return 'margin-rigth: 10px;';\r\n      default:\r\n        return 'margin: 0;';\r\n    }\r\n  }}\r\n  \r\n  &:hover,\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 0 2px ${props => props.theme.accentColor};\r\n  }\r\n\r\n  &:active {\r\n    outline: none;\r\n    box-shadow: 0px 0px 8px 2px\r\n      ${props => {\r\n        if (props.bg === 'light') {\r\n          return ` ${props.theme.primaryBgColor};`;\r\n        }\r\n        if (props.bg === 'dark') {\r\n          return ` ${props.theme.invertedBgColor};`;\r\n        }\r\n      }};\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nconst ContentBox = styled.div`\r\n  width: 300px;\r\n  padding: 15px;\r\n  background-color: ${props => props.theme.invertedBgColor};\r\n  border-radius: 5px;\r\n  box-shadow: 0px 0px 12px -2px ${props => props.theme.invertedBgColor};\r\n`;\r\n\r\nexport default ContentBox;\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  margin-top: 5px;\r\n  border-radius: 5px;\r\n  border: 2px solid transparent;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    border-color: ${props => props.theme.accentColor};\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\n\r\nconst Label = styled.label`\r\n  color: ${props => props.theme.invertedTextColor};\r\n`;\r\n\r\nexport default Label;\r\n","import styled from 'styled-components';\r\n\r\nconst FormField = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport default FormField;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContacstSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const updateFilter = createAction('contacts/update_filter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../styled-components/Button';\r\nimport ContentBox from '../styled-components/ContentBox';\r\nimport Input from '../styled-components/Input';\r\nimport Label from '../styled-components/Label';\r\nimport FormField from '../styled-components/FormField';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\n\r\nconst Form = ContentBox.withComponent('form');\r\n\r\nclass ContactForm extends React.Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    const { name, number } = this.state;\r\n    const { createNewContact } = this.props;\r\n\r\n    event.preventDefault();\r\n\r\n    createNewContact(name, number);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <FormField>\r\n          <Label>\r\n            Name\r\n            <Input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </Label>\r\n        </FormField>\r\n        <FormField>\r\n          <Label>\r\n            Number\r\n            <Input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </Label>\r\n        </FormField>\r\n        <Button type=\"submit\" bg=\"light\" position=\"bottom\">\r\n          Add contact\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  createNewContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  createNewContact: (name, number) =>\r\n    dispatch(contactsOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getIsLoading = state => state.contacts.loading;\r\nconst getAllContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return items.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default { getIsLoading, getFilter, getFilteredContacts };\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport ContentBox from '../styled-components/ContentBox';\r\nimport Label from '../styled-components/Label';\r\nimport Input from '../styled-components/Input';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <ContentBox>\r\n    <Label>\r\n      Find contacts by name\r\n      <Input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\r\n    </Label>\r\n  </ContentBox>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(actions.updateFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../styled-components/Button';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = ({ filteredContacts, deleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {filteredContacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name} {number}\r\n          <Button\r\n            type=\"button\"\r\n            name={id}\r\n            onClick={deleteContact}\r\n            size=\"small\"\r\n            bg=\"dark\"\r\n            position=\"right\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  filteredContacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filteredContacts: contactsSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: e => dispatch(contactsOperations.deleteContact(e.target.name)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../ContactForm';\r\nimport Filter from '../Filter';\r\nimport ContactList from '../ContactList';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { isLoadingContacts } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        {isLoadingContacts && <h2>Loading...</h2>}\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getIsLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  updateFilter,\r\n} from './contacts-actions';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    const contactExists = state.find(contact => contact.name === payload.name);\r\n\r\n    if (contactExists) {\r\n      alert(`${payload.name} is already in contacts`);\r\n      return state;\r\n    }\r\n    return [payload, ...state];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [updateFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: (_, { payload }) => {\r\n    console.log(payload);\r\n    return payload;\r\n  },\r\n  [addContactError]: (_, { payload }) => {\r\n    console.log(payload);\r\n    return payload;\r\n  },\r\n  [deleteContactError]: (_, { payload }) => {\r\n    console.log(payload);\r\n    return payload;\r\n  },\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport { store };\r\n","export const primaryBgColor = '#e3dcd2';\r\nexport const invertedBgColor = '#013328';\r\nexport const invertedTextColor = '#e3dcd2';\r\nexport const primaryTextColor = '#0f2405';\r\nexport const accentColor = '#cc8b65';\r\n","import { createGlobalStyle } from 'styled-components/macro';\r\n\r\nexport default createGlobalStyle`\r\nbody {\r\n  padding: 10px;\r\n  color: ${props => props.theme.primaryTextColor};\r\n  background-color:  ${props => props.theme.primaryBgColor};\r\n}\r\n\r\nli {\r\n  line-height: 1.8;\r\n}`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport * as theme from './styles/theme.js';\r\nimport GlobalStyle from './styles/globalStyles';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}